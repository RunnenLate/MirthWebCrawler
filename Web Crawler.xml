<channelGroup version="3.12.0">
  <id>88c55dc8-cb30-4c32-a50c-32cf183be66c</id>
  <name>Web Crawler</name>
  <revision>2</revision>
  <lastModified>
    <time>1638766738588</time>
    <timezone>America/Chicago</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.12.0">
      <id>0f4eafe0-e3cd-4b9c-96b5-068f564263bc</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>Scarp Website</name>
      <description></description>
      <revision>44</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <pollConnectorProperties version="3.12.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>60000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <script>return &apos; &apos;;</script>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>debug</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <variable>debug</variable>
              <mapping></mapping>
              <defaultValue>&apos;1&apos;</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.mapper.MapperStep version="3.12.0">
              <name>baseURL</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <variable>baseURL</variable>
              <mapping></mapping>
              <defaultValue>&apos;https://www.resetera.com/&apos;</defaultValue>
              <replacements/>
              <scope>CHANNEL</scope>
            </com.mirth.connect.plugins.mapper.MapperStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <name>Get URL From Databse</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <script>var sql = &apos;CALL getURL()&apos;
var resultSet = queryPoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, null)
if (resultSet.next()) {
	channelMap.put(&apos;QuereURL&apos;,  $(&apos;baseURL&apos;) + resultSet.getString(&apos;URL&apos;))
	channelMap.put(&apos;urlID&apos;, resultSet.getString(&apos;URL_ID&apos;))
} else {
	channelMap.put(&apos;QuereURL&apos;,  $(&apos;baseURL&apos;) + &apos;forums/gaming-forum.7/&apos;)
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>RAW</inboundDataType>
          <outboundDataType>RAW</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>JavaScript Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Fetch Website</name>
          <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <host>${QuereURL}</host>
            <useProxyServer>false</useProxyServer>
            <proxyAddress></proxyAddress>
            <proxyPort></proxyPort>
            <method>get</method>
            <headers class="linked-hash-map"/>
            <parameters class="linked-hash-map"/>
            <useHeadersVariable>false</useHeadersVariable>
            <headersVariable></headersVariable>
            <useParametersVariable>false</useParametersVariable>
            <parametersVariable></parametersVariable>
            <responseXmlBody>false</responseXmlBody>
            <responseParseMultipart>true</responseParseMultipart>
            <responseIncludeMetadata>false</responseIncludeMetadata>
            <responseBinaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</responseBinaryMimeTypes>
            <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
            <multipart>false</multipart>
            <useAuthentication>false</useAuthentication>
            <authenticationType>Basic</authenticationType>
            <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
            <username></username>
            <password></password>
            <content></content>
            <contentType>text/plain</contentType>
            <dataTypeBinary>false</dataTypeBinary>
            <charset>UTF-8</charset>
            <socketTimeout>30000</socketTimeout>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
                <name>Scarp website for links</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>importPackage(org.jsoup)

//Insert link into database 
function insertURL(link) {
	params = new Packages.java.util.ArrayList()
	params.add(link)
	var sql = &apos;CALL insertURL(?)&apos;
	updatePoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, params)
}

//Update URL that was used as processed
function processURL(processed, error, ID) {
	params = new Packages.java.util.ArrayList()
	params.add(processed)
	params.add(error)
	params.add(ID)
	var sql = &apos;CALL processURL(?, ?, ?)&apos;
	updatePoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, params)
}

//Indert All Post text into database as one blob
function insertPost(ID, postText) {
	params = new Packages.java.util.ArrayList()
	params.add(ID)
	params.add(postText)
	var sql = &apos;CALL insertPost(?, ?)&apos;
	updatePoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, params)
}

try {
	//convert inbound message to Jsoup object.
	var Doc = Jsoup.parse(msg)
	
	if ($(&apos;debug&apos;) == &apos;1&apos;) {
		logger.info(&apos;All a href thread values: &apos; + Doc.select(&apos;div.block-body&apos;).select(&apos;a[href*=/threads/]&apos;))
	}
	//select all link in page starting with &apos;/tread/&apos;, convert from object to string then turn into array based on ending &apos;&lt;/a&gt;&apos; value
	var linkNav = Doc.select(&apos;div.block-body&apos;).select(&apos;a[href*=/threads/]&apos;).toString() + Doc.select(&apos;div.block-outer-main&apos;).select(&apos;a[href*=/forums/]&apos;).toString()
	var linkText = linkNav.split(&apos;&lt;/a&gt;&apos;)
	if ($(&apos;debug&apos;) == &apos;1&apos;) {
		logger.info(&apos;variable text : &apos; + linkText)
	}
	var pageText = new String(Doc.select(&apos;div.bbWrapper&apos;).text())
	logger.info(&apos;pageText: &apos; + pageText)
	
	//Iterate through text array
	for(link in linkText) {
		//convert each value in array back to html to strip out just the &apos;href&apos; text value
		if ($(&apos;debug&apos;) == &apos;1&apos;) {
			logger.info(&apos;link values: &apos; + Jsoup.parse(linkText[link]).select(&apos;a[href]&apos;).attr(&apos;href&apos;))
		}
		//find all link within the webpage and filter out undesirables 
		var path = Jsoup.parse(linkText[link]).select(&apos;a[href]&apos;).attr(&apos;href&apos;)
		if (path.indexOf(&apos;#post-&apos;) == -1 &amp;&amp; path.indexOf(&apos;/post-&apos;) == -1 &amp;&amp; path.indexOf(&apos;/last&apos;) == -1 &amp;&amp; path.indexOf(&apos;/latest&apos;) == -1 &amp;&amp; path.indexOf(&apos;https://&apos;) == -1 &amp;&amp; path.indexOf(&apos;/reader&apos;) == -1&amp;&amp; path.indexOf(&apos;/threadmarks&apos;) == -1) {
			insertURL(Jsoup.parse(linkText[link]).select(&apos;a[href]&apos;).attr(&apos;href&apos;))
		}
	}
	if ($(&apos;debug&apos;) == &apos;1&apos;) {
			logger.info(&apos;urlID: &apos; + $(&apos;urlID&apos;))
		}
	//Call to have the url inserted into database 	
	if ($(&apos;urlID&apos;) != null &amp;&amp; $(&apos;urlID&apos;) != undefined &amp;&amp; $(&apos;urlID&apos;) != &apos;&apos;) {
		processURL(1, null, $(&apos;urlID&apos;))
		insertPost($(&apos;urlID&apos;), pageText.replace(/[\n\r\t]/g, &apos;&apos;).toString())
	}
//Catch any error and update database accordingly 	
}catch (e) {
	if ($(&apos;debug&apos;) == &apos;1&apos;) {
		logger.info(&apos;Response processing error: &apos; + e)
	}
	if ($(&apos;urlID&apos;) != null || $(&apos;urlID&apos;) != undefined &amp;&amp; $(&apos;urlID&apos;) != &apos;&apos;) {
		processURL(0, e, $(&apos;urlID&apos;))
	}
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>HTTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1638768142672</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>619fac77-fca2-465f-b685-c821893d564e</id>
            <name>Hikari DB</name>
            <revision>4</revision>
            <lastModified>
              <time>1637108338528</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>0f4eafe0-e3cd-4b9c-96b5-068f564263bc</string>
              <string>cefbee5f-b1db-4c86-94b5-0bdfd7f043ca</string>
              <string>bc8b5f0f-17b4-4e8e-b2a0-480e8d5be07a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f8c2e8fb-4d7e-4372-abb3-f88956c0bc33</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>cca2bb85-cb9d-4127-8ce3-cbec082de245</id>
                <name>clearConnectionPool</name>
                <revision>1</revision>
                <lastModified>
                  <time>1636933263319</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evict all existing database connections from all Hikari connection pools in globalMap.
*/
function clearConnectionPools()
{
	for each (key_entry in globalMap.getVariables().keySet().toArray())
	{
		if (key_entry.substring(0, 8).equals(&quot;hikariDS&quot;))
		{
			logger.info(&quot;Evicting all database connections from &quot; + key_entry);
			var hikariDS = globalMap.get(key_entry);
			for (var i = 0; i &lt;= hikariDS.getMaximumPoolSize(); i++)
			{
				dbConn = hikariDS.getConnection();
				if (dbConn != null) hikariDS.evictConnection(dbConn);
			}
		}
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8e8ce565-a965-4dcd-a74d-3b51c654d7f4</id>
                <name>getDBPoolConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1636933263347</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a (reusable) PostgreSQL database connection from a pool managed by Hikari.
	Make sure to provide all parameters including empty strings (&quot;&quot;)

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@return {Connection} - immplementation of java.sql.Connection object
		(please see appropriate javadoc for its usage)
*/
function getPoolDbConn(dbtype, database, server, user, password)
{
	var poolSize = 20;
	var dbConn = null;
	var error = &quot;&quot;;
	if (database != null &amp;&amp; database.length &gt; 0 &amp;&amp; !database.equals(&quot;null&quot;))
	{
		if (server.length == 0) server = new String(configurationMap.get(&quot;mirthresults_server&quot;));
		if (server != null &amp;&amp; server.length &gt; 0 &amp;&amp; !server.equals(&quot;null&quot;))
		{
			var hikariDS = globalMap.get(&quot;hikariDS_&quot; + server + &quot;_&quot; + database);
			// Create Connection Pool if it does not exist
			if(hikariDS == null)
			{
				hikariDS = new Packages.com.zaxxer.hikari.HikariDataSource();
				var driver = &quot;&quot;;
				var url = &quot;&quot;;
				dbtype = dbtype.toLowerCase();
				if (dbtype.equals(&quot;mysql&quot;))
				{
					driver = &quot;com.mysql.jdbc.Driver&quot;;
					url = &quot;jdbc:mysql://&quot; + server + &quot;:3306/&quot; + database;
				}
				else if (dbtype.equals(&quot;oracle&quot;))
				{
					driver = &quot;oracle.jdbc.OracleDriver&quot;;
					url = &quot;jdbc:oracle:thin:@&quot; + server + &quot;:1521:&quot; + database;
				}
				else if (dbtype.indexOf(&quot;postgres&quot;) == 0)
				{
					driver = &quot;org.postgresql.Driver&quot;;
					url = &quot;jdbc:postgresql://&quot; + server + &quot;:5432/&quot; + database;
				}
				else if (dbtype.indexOf(&quot;sqlserver&quot;) &gt;= 0)
				{
					driver = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
					url = &quot;jdbc:jtds:sqlserver://&quot; + server + &quot;:1433/&quot; + database;
				}
				// else throw &quot;Connection to database of type &quot; + dbtype &quot; is not yet implemented&quot;;
				if (user.length == 0) user = database;
				if (password.length == 0) password = database;
				hikariDS.setDriverClassName(driver);			// Default: found automatically
				hikariDS.setJdbcUrl(url);
				hikariDS.setUsername(user);
				hikariDS.setPassword(password);
				hikariDS.setPoolName(server + &quot;_&quot; + database);	// Default: auto-generated
				hikariDS.setMaximumPoolSize(poolSize);				// Default: 10
				//hikariDS.setAutoCommit(true);					// Default: true
				//hikariDS.setMaxLifetime(1000000);				// Default: 1800000
				//hikariDS.setConnectionTestQuery(&quot;select 1 as test_result&quot;); // Don&apos;t set if DB supports Connection.isValid()
				//hikariDS.setConnectionTimeout(5000);			// Default: 30000
				//hikariDS.setInitializationFailFast(false);	// Default: true
				//hikariDS.setIdleTimeout(5000);				// Default: 600000
				//try { hikariDS.setLoginTimeout(5000); }		// Default: ???
				//catch(Exception ex) { }
				//globalMap.put(&quot;hikariDS_&quot; + server + &quot;_&quot; + database, hikariDS);
				hikariDS.setLeakDetectionThreshold(5000);
				globalMap.put(&quot;hikariDS_&quot; + server + &quot;_&quot; + database, hikariDS);
			}
			if (hikariDS != null)
			{
				var goodConnectionFound = false;
				// Try to query the DB using each connection in the pool (and a new one), if they all fail - error out
				for (var i = 0; i &lt;= poolSize; i++)
				{
					// Step 1: get DB connection
					dbConn = hikariDS.getConnection();
					// Step 2: test the DB connection and handle the possible exception
					var tempInt = -1;
					try
					{
						var stmt = dbConn.createStatement();
						var db_res = stmt.executeQuery(&quot;select 321 as db_test&quot;);
						if (db_res.next())
						{
							tempInt = db_res.getInt(1);
						}
						stmt.close();
					}
					catch(ex) { error = new String(ex.toString()); }
					if (tempInt == 321)
					{
						error = &quot;&quot;;
						goodConnectionFound = true;
						break;
					}
					// Step 3: remove bad connection from the pool
					else hikariDS.evictConnection(dbConn);
				}
				if (!goodConnectionFound) dbConn = null;
			}
			else error = &quot;getPoolDbConn() cannot create a new Hikari data source (connection pool)&quot;;
		}
		else error = &quot;getPoolDbConn() server address not provided&quot;;
	}
	else error = &quot;getPoolDbConn() database name not provided&quot;;
	if (error.length &gt; 4) throw error;
	return dbConn;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ef779224-ab16-408b-b824-19b3189766a0</id>
                <name>queryDBConneciton</name>
                <revision>11</revision>
                <lastModified>
                  <time>1637115353125</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Run a SQL query using a pooled PostgreSQL database connection
	obtained (in this function) by calling getPoolDbConn()
	Make sure to provide all parameters including empty strings (&quot;&quot;) or null&apos;s as appropriate.

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@param (String} sql - SQL query to execute, may include ? for parameters
	@param {Array} args - JavaScript array of query parameters,
		can be a mix of strings and numbers or null
	@return {CachedRowSet} - returns a standard CachedRowSet directly usable
		(can be returned from a Database Reader)
*/
function queryPoolDbConn(dbtype, database, server, user, password, sql, args)
{
	var valOut = null;
	var dbConn = getPoolDbConn(dbtype, database, server, user, password);
	if (dbConn != null)
	{
		var statement = dbConn.prepareStatement(sql);
		
		if (statement != null)
		{
			if (args != null &amp;&amp; args.size() &gt; 0)
			{
				statement.clearParameters();
				//logger.info(&apos;args length: &apos; + args.size())
				for (var i = 0; i &lt; args.size(); i++)
				{
					//logger.info(&apos;args: &apos; + args.get(i))
					statement.setObject(i + 1, args.get(i));
				}
			}
			//logger.info(&apos;statement: &apos; + statement)
			var db_res = statement.executeQuery();
			valOut = new Packages.com.sun.rowset.CachedRowSetImpl();
			valOut.populate(db_res);
			statement.close();
		}
		else throw &quot;updatePoolDbConn(): dbConn.prepareStatement() failed&quot;;
		dbConn.close();
	}
	else throw &quot;updatePoolDbConn(): dbConn cannot connect to the database&quot;;
	return valOut;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7b84e8a9-1175-48ed-8980-721a2be481de</id>
                <name>UpdateDBConnection</name>
                <revision>5</revision>
                <lastModified>
                  <time>1637115353137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Run a SQL update using a pooled PostgreSQL database connection
	obtained (in this function) by calling getPoolDbConn()
	Make sure to provide all parameters including empty strings (&quot;&quot;) or null&apos;s as appropriate.

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@param (String} sql - SQL query to execute, may include ? for parameters
	@param {Array} args - JavaScript array of query parameters,
		can be a mix of strings and numbers or null
	@return {Integer} - returns the number of affected rows
*/
function updatePoolDbConn(dbtype, database, server, user, password, sql, args)
{
	var row_count = -1;
	var dbConn = getPoolDbConn(dbtype, database, server, user, password);
	if (dbConn != null)
	{
		dbConn.setAutoCommit(true);
		var statement = dbConn.prepareStatement(sql);
		if (statement != null)
		{
			if (args != null &amp;&amp; args.size() &gt; 0)
			{
				statement.clearParameters();
				for (var i = 0; i &lt; args.size(); i++)
				{
					//logger.info(&apos;args value: &apos; + args.get(i))
					statement.setObject(i + 1, args.get(i));
				}
			}
			row_count = statement.executeUpdate();
			statement.close();
		}
		else throw &quot;updatePoolDbConn(): dbConn.prepareStatement() failed&quot;;
		dbConn.close();
	}
	else throw &quot;updatePoolDbConn(): dbConn cannot connect to the database&quot;;
	return row_count;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.12.0">
      <id>bc8b5f0f-17b4-4e8e-b2a0-480e8d5be07a</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>Parse Words</name>
      <description></description>
      <revision>47</revision>
      <sourceConnector version="3.12.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.js.JavaScriptReceiverProperties" version="3.12.0">
          <pluginProperties/>
          <pollConnectorProperties version="3.12.0">
            <pollingType>INTERVAL</pollingType>
            <pollOnStart>true</pollOnStart>
            <pollingFrequency>60000</pollingFrequency>
            <pollingHour>0</pollingHour>
            <pollingMinute>0</pollingMinute>
            <cronJobs/>
            <pollConnectorPropertiesAdvanced>
              <weekly>true</weekly>
              <inactiveDays>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
                <boolean>false</boolean>
              </inactiveDays>
              <dayOfMonth>1</dayOfMonth>
              <allDay>true</allDay>
              <startingHour>8</startingHour>
              <startingMinute>0</startingMinute>
              <endingHour>17</endingHour>
              <endingMinute>0</endingMinute>
            </pollConnectorPropertiesAdvanced>
          </pollConnectorProperties>
          <sourceConnectorProperties version="3.12.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <script>return &apos; &apos;;</script>
        </properties>
        <transformer version="3.12.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.12.0">
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>function readTextOrder(cl) {
	var strOut = new java.lang.StringBuffer()
	var aux = java.lang.String()
	var br = new java.io.BufferedReader(cl.getCharacterStream())
	while ((aux = br.readLine()) != null)
	strOut.appead(aux)
	return strOut
}
//All Post from database and create an object containg each column of data
var postObjects = {}
var sql = &apos;CALL getPost()&apos;
var resultSet = queryPoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, null)
if (resultSet.next()) {
	var post = {
		&apos;postBody&apos; : new String(resultSet.getString(&apos;post_Body&apos;)).replace(/[^a-zA-Z0-9 ]/g, &quot;&quot;).toLowerCase().split(&apos; &apos;),
		&apos;error&apos; : resultSet.getString(&apos;Error&apos;),
		&apos;procesed&apos; : resultSet.getString(&apos;procesed&apos;)
		
	}
	postObjects[resultSet.getString(&apos;Post_ID&apos;)] = post
}	

//logger.info(&apos;postObject: &apos; + JSON.stringify(postObjects))
channelMap.put(&apos;postObject&apos;, postObjects)</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>RAW</inboundDataType>
          <outboundDataType>RAW</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.12.0">
          <elements/>
        </filter>
        <transportName>JavaScript Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.12.0">
          <metaDataId>1</metaDataId>
          <name>Process Words in Post</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.12.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.12.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>//Update word count for each word provided 
function updateWordCount(word) {
	params = new Packages.java.util.ArrayList()
	params.add(word)
	var sql = &apos;CALL insertUpdateWord(?)&apos;
	updatePoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, params)

}

//Update record in databse as processed 
function processPost(processed, error, ID) {
	params = new Packages.java.util.ArrayList()
	params.add(processed)
	params.add(error)
	params.add(ID)
	var sql = &apos;CALL processPost(?, ?, ?)&apos;
	updatePoolDbConn(&apos;mysql&apos;, &apos;it810&apos;, &apos;127.0.0.1&apos;, &apos;mirth&apos;, &apos;Password1&apos;, sql, params)
}

//Loop through each word in the post and insert/update word count for each.
try{
	for (post in $(&apos;postObject&apos;)) {
		var ID = post
		for(var i = 0; i &lt; $(&apos;postObject&apos;)[post][&apos;postBody&apos;].length; i++) {
			updateWordCount($(&apos;postObject&apos;)[post][&apos;postBody&apos;][i])
		}
		processPost(1, null, ID)
	}

//Catch any error and update record accordingly 
}catch (e) {
	if ($(&apos;debug&apos;) == &apos;1&apos;) {
		logger.info(&apos;Response processing error: &apos; + e)
	}
	if ($(&apos;urlID&apos;) != null || $(&apos;urlID&apos;) != undefined &amp;&amp; $(&apos;urlID&apos;) != &apos;&apos;) {
		processPost(0, e, ID)
	}
}</script>
          </properties>
          <transformer version="3.12.0">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.12.0">
            <elements/>
            <inboundDataType>RAW</inboundDataType>
            <outboundDataType>RAW</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.raw.RawDataTypeProperties" version="3.12.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.raw.RawBatchProperties" version="3.12.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.12.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.12.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.12.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1638768455227</time>
            <timezone>America/Chicago</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
            <pruneErroredMessages>false</pruneErroredMessages>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.12.0">
            <id>619fac77-fca2-465f-b685-c821893d564e</id>
            <name>Hikari DB</name>
            <revision>4</revision>
            <lastModified>
              <time>1637108338528</time>
              <timezone>America/Chicago</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>false</includeNewChannels>
            <enabledChannelIds>
              <string>0f4eafe0-e3cd-4b9c-96b5-068f564263bc</string>
              <string>cefbee5f-b1db-4c86-94b5-0bdfd7f043ca</string>
              <string>bc8b5f0f-17b4-4e8e-b2a0-480e8d5be07a</string>
            </enabledChannelIds>
            <disabledChannelIds>
              <string>f8c2e8fb-4d7e-4372-abb3-f88956c0bc33</string>
            </disabledChannelIds>
            <codeTemplates>
              <codeTemplate version="3.12.0">
                <id>cca2bb85-cb9d-4127-8ce3-cbec082de245</id>
                <name>clearConnectionPool</name>
                <revision>1</revision>
                <lastModified>
                  <time>1636933263319</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evict all existing database connections from all Hikari connection pools in globalMap.
*/
function clearConnectionPools()
{
	for each (key_entry in globalMap.getVariables().keySet().toArray())
	{
		if (key_entry.substring(0, 8).equals(&quot;hikariDS&quot;))
		{
			logger.info(&quot;Evicting all database connections from &quot; + key_entry);
			var hikariDS = globalMap.get(key_entry);
			for (var i = 0; i &lt;= hikariDS.getMaximumPoolSize(); i++)
			{
				dbConn = hikariDS.getConnection();
				if (dbConn != null) hikariDS.evictConnection(dbConn);
			}
		}
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>8e8ce565-a965-4dcd-a74d-3b51c654d7f4</id>
                <name>getDBPoolConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1636933263347</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get a (reusable) PostgreSQL database connection from a pool managed by Hikari.
	Make sure to provide all parameters including empty strings (&quot;&quot;)

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@return {Connection} - immplementation of java.sql.Connection object
		(please see appropriate javadoc for its usage)
*/
function getPoolDbConn(dbtype, database, server, user, password)
{
	var poolSize = 20;
	var dbConn = null;
	var error = &quot;&quot;;
	if (database != null &amp;&amp; database.length &gt; 0 &amp;&amp; !database.equals(&quot;null&quot;))
	{
		if (server.length == 0) server = new String(configurationMap.get(&quot;mirthresults_server&quot;));
		if (server != null &amp;&amp; server.length &gt; 0 &amp;&amp; !server.equals(&quot;null&quot;))
		{
			var hikariDS = globalMap.get(&quot;hikariDS_&quot; + server + &quot;_&quot; + database);
			// Create Connection Pool if it does not exist
			if(hikariDS == null)
			{
				hikariDS = new Packages.com.zaxxer.hikari.HikariDataSource();
				var driver = &quot;&quot;;
				var url = &quot;&quot;;
				dbtype = dbtype.toLowerCase();
				if (dbtype.equals(&quot;mysql&quot;))
				{
					driver = &quot;com.mysql.jdbc.Driver&quot;;
					url = &quot;jdbc:mysql://&quot; + server + &quot;:3306/&quot; + database;
				}
				else if (dbtype.equals(&quot;oracle&quot;))
				{
					driver = &quot;oracle.jdbc.OracleDriver&quot;;
					url = &quot;jdbc:oracle:thin:@&quot; + server + &quot;:1521:&quot; + database;
				}
				else if (dbtype.indexOf(&quot;postgres&quot;) == 0)
				{
					driver = &quot;org.postgresql.Driver&quot;;
					url = &quot;jdbc:postgresql://&quot; + server + &quot;:5432/&quot; + database;
				}
				else if (dbtype.indexOf(&quot;sqlserver&quot;) &gt;= 0)
				{
					driver = &quot;net.sourceforge.jtds.jdbc.Driver&quot;;
					url = &quot;jdbc:jtds:sqlserver://&quot; + server + &quot;:1433/&quot; + database;
				}
				// else throw &quot;Connection to database of type &quot; + dbtype &quot; is not yet implemented&quot;;
				if (user.length == 0) user = database;
				if (password.length == 0) password = database;
				hikariDS.setDriverClassName(driver);			// Default: found automatically
				hikariDS.setJdbcUrl(url);
				hikariDS.setUsername(user);
				hikariDS.setPassword(password);
				hikariDS.setPoolName(server + &quot;_&quot; + database);	// Default: auto-generated
				hikariDS.setMaximumPoolSize(poolSize);				// Default: 10
				//hikariDS.setAutoCommit(true);					// Default: true
				//hikariDS.setMaxLifetime(1000000);				// Default: 1800000
				//hikariDS.setConnectionTestQuery(&quot;select 1 as test_result&quot;); // Don&apos;t set if DB supports Connection.isValid()
				//hikariDS.setConnectionTimeout(5000);			// Default: 30000
				//hikariDS.setInitializationFailFast(false);	// Default: true
				//hikariDS.setIdleTimeout(5000);				// Default: 600000
				//try { hikariDS.setLoginTimeout(5000); }		// Default: ???
				//catch(Exception ex) { }
				//globalMap.put(&quot;hikariDS_&quot; + server + &quot;_&quot; + database, hikariDS);
				hikariDS.setLeakDetectionThreshold(5000);
				globalMap.put(&quot;hikariDS_&quot; + server + &quot;_&quot; + database, hikariDS);
			}
			if (hikariDS != null)
			{
				var goodConnectionFound = false;
				// Try to query the DB using each connection in the pool (and a new one), if they all fail - error out
				for (var i = 0; i &lt;= poolSize; i++)
				{
					// Step 1: get DB connection
					dbConn = hikariDS.getConnection();
					// Step 2: test the DB connection and handle the possible exception
					var tempInt = -1;
					try
					{
						var stmt = dbConn.createStatement();
						var db_res = stmt.executeQuery(&quot;select 321 as db_test&quot;);
						if (db_res.next())
						{
							tempInt = db_res.getInt(1);
						}
						stmt.close();
					}
					catch(ex) { error = new String(ex.toString()); }
					if (tempInt == 321)
					{
						error = &quot;&quot;;
						goodConnectionFound = true;
						break;
					}
					// Step 3: remove bad connection from the pool
					else hikariDS.evictConnection(dbConn);
				}
				if (!goodConnectionFound) dbConn = null;
			}
			else error = &quot;getPoolDbConn() cannot create a new Hikari data source (connection pool)&quot;;
		}
		else error = &quot;getPoolDbConn() server address not provided&quot;;
	}
	else error = &quot;getPoolDbConn() database name not provided&quot;;
	if (error.length &gt; 4) throw error;
	return dbConn;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>ef779224-ab16-408b-b824-19b3189766a0</id>
                <name>queryDBConneciton</name>
                <revision>11</revision>
                <lastModified>
                  <time>1637115353125</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Run a SQL query using a pooled PostgreSQL database connection
	obtained (in this function) by calling getPoolDbConn()
	Make sure to provide all parameters including empty strings (&quot;&quot;) or null&apos;s as appropriate.

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@param (String} sql - SQL query to execute, may include ? for parameters
	@param {Array} args - JavaScript array of query parameters,
		can be a mix of strings and numbers or null
	@return {CachedRowSet} - returns a standard CachedRowSet directly usable
		(can be returned from a Database Reader)
*/
function queryPoolDbConn(dbtype, database, server, user, password, sql, args)
{
	var valOut = null;
	var dbConn = getPoolDbConn(dbtype, database, server, user, password);
	if (dbConn != null)
	{
		var statement = dbConn.prepareStatement(sql);
		
		if (statement != null)
		{
			if (args != null &amp;&amp; args.size() &gt; 0)
			{
				statement.clearParameters();
				//logger.info(&apos;args length: &apos; + args.size())
				for (var i = 0; i &lt; args.size(); i++)
				{
					//logger.info(&apos;args: &apos; + args.get(i))
					statement.setObject(i + 1, args.get(i));
				}
			}
			//logger.info(&apos;statement: &apos; + statement)
			var db_res = statement.executeQuery();
			valOut = new Packages.com.sun.rowset.CachedRowSetImpl();
			valOut.populate(db_res);
			statement.close();
		}
		else throw &quot;updatePoolDbConn(): dbConn.prepareStatement() failed&quot;;
		dbConn.close();
	}
	else throw &quot;updatePoolDbConn(): dbConn cannot connect to the database&quot;;
	return valOut;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.12.0">
                <id>7b84e8a9-1175-48ed-8980-721a2be481de</id>
                <name>UpdateDBConnection</name>
                <revision>5</revision>
                <lastModified>
                  <time>1637115353137</time>
                  <timezone>America/Chicago</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Run a SQL update using a pooled PostgreSQL database connection
	obtained (in this function) by calling getPoolDbConn()
	Make sure to provide all parameters including empty strings (&quot;&quot;) or null&apos;s as appropriate.

	@param {String} dbtype - database vendor, only MySQL, Oracle, PostgreS(QL) and (MS) SQLServer
		have been implemented
	@param {String} database - name of the database, e.g. mirthresults, mirthmatch, etc.
	@param {String} server - domain name or IP address of the database server
		(may be empty if &quot;mirthresults_server&quot; is defined)
	@param {String} user - database user name (may be empty)
	@param {String} password - database user password (may be empty)
	@param (String} sql - SQL query to execute, may include ? for parameters
	@param {Array} args - JavaScript array of query parameters,
		can be a mix of strings and numbers or null
	@return {Integer} - returns the number of affected rows
*/
function updatePoolDbConn(dbtype, database, server, user, password, sql, args)
{
	var row_count = -1;
	var dbConn = getPoolDbConn(dbtype, database, server, user, password);
	if (dbConn != null)
	{
		dbConn.setAutoCommit(true);
		var statement = dbConn.prepareStatement(sql);
		if (statement != null)
		{
			if (args != null &amp;&amp; args.size() &gt; 0)
			{
				statement.clearParameters();
				for (var i = 0; i &lt; args.size(); i++)
				{
					//logger.info(&apos;args value: &apos; + args.get(i))
					statement.setObject(i + 1, args.get(i));
				}
			}
			row_count = statement.executeUpdate();
			statement.close();
		}
		else throw &quot;updatePoolDbConn(): dbConn.prepareStatement() failed&quot;;
		dbConn.close();
	}
	else throw &quot;updatePoolDbConn(): dbConn cannot connect to the database&quot;;
	return row_count;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>